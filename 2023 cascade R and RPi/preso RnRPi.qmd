---
title: "R on a Raspberry Pi"
author: "Mark Niemann-Ross"
format: revealjs
editor: visual
---

## R on a Raspberry Pi

Mark Niemann-Ross \* mark\@niemannross.com

-   \|\>

-   `R*aspberry[pi]`

-   !!

``` python
def fib(n):
     a, b = 0, 1
     while a < n:
         print(a, end=' ')
         a, b = b, a+b
     print()
 fib(1000)
```

## Raspberry Pi

![Raspberry Pi Model 4](raspberry-pi-4-model-b%20crop.jpg){fig-alt="An image showing the Raspberry Pi Model 4" fig-align="left" width="393"}

-   Linux / Python

-   \~ \$45 USD (depending on model)

-   consumes \~3-6 watts

-   USB, HDMI, Ethernet, GPIO, camera port, display port, audio

## Install R

``` r
sudo apt-get update
sudo apt-get install r-base r-base-core
```

## Fix the App Menu

![](fixtheapp.png){fig-alt="Image showing how to fix the app location in Raspbian"}

::: notes
R appears in the Graphic Menu.

To move it to the programming menu

-   RPi menu -\> Preferences -\> main menu editor

-   programming -\> new item: Name=R, Command=R, Launch in terminal. OK
:::

## Fix the Icon

![](fixtheicon.png){fig-alt="Image showing how to fix the icon for R"}

::: notes
-   Rpi menu -\> right click on R.

-   Choose Properties.

-   Click on Icon to bring up chooser.

-   System Theme::rlogo.icon
:::

## Install a gui

+:--------------------------------------------------------------------------------------:+:--------------------------------------------------------------------------------------------------------------:+
| ![Rgui](Screenshot_Rgui.png){fig-alt="An image showing the Rgui console." width="302"} | ![Rstudio](Screenshot_rstudio.png){fig-alt="An image showing a screen capture of the Rstudio IDE" width="345"} |
+----------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------+
| ![Geany](screenshot_geany.png){fig-alt="An image showing the Geany IDE"}               | ![posit Cloud](Screenshot_cloud.png){width="331"}                                                              |
+----------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------+

::: notes
-   Rstudio is not available for Raspberry Pi (available for amd64, but not amdhf)

-   posit cloud isn't local - can't access GPIO

-   Rgui not available for linux

-   unable to install rcommander or rattle

-   **geany works**
:::

## Setup geany

![Configuring geany for R](geany_config.png){fig-alt="An image showing how to configure Geany to run the R programming language"}

::: notes
+-----------------------------------+---------------------------------------------------------+
| Command                           | What it does                                            |
+===================================+=========================================================+
| edit/preferences/terminal...      | This runs an R file in the geany terminal               |
|                                   |                                                         |
| check - *execute programs in VTE* |                                                         |
+-----------------------------------+---------------------------------------------------------+
| build -\> set build commands...   | this runs the R file as a batch command                 |
|                                   |                                                         |
| execute: `Rscript ./%f`           | output saved to .Rout in /home/pi or next to input file |
+-----------------------------------+---------------------------------------------------------+
| build -\> set build commands...   |                                                         |
|                                   |                                                         |
| `R CMD BATCH: R CMD BATCH ./%f`   |                                                         |
+-----------------------------------+---------------------------------------------------------+

::: notes
<div>

NOTE: file names cannot have spaces

https://wiki.geany.org/howtos/using_geany_with_r

https://wiki.geany.org/howtos/configurebuildmenu

</div>
:::
:::

## Run R

Saved as "hello_world.R"

``` r
# install.packages("cowsay")

library(cowsay)

say("Hello world")

plot(x = 1:10, y = 10:1)
```

::: notes
opens terminal. Plot is created as PDF next to program

Geany terminal can be used to run R

enter Geany terminal, then type R to start R

sudo to install packages
:::

## Install libgpiod

::: notes
Other libraries:

-   [wiringpi](http://wiringpi.com)

-   [gpio](https://www.raspberrypi.com/documentation/computers/config_txt.html#gpio-control)

-   [libgpiod](https://www.ics.com/blog/gpio-programming-exploring-libgpiod-library)

-   [raspi-gpio](https://github.com/nebrius/raspi-gpio)
:::

One of many libraries for GPIO access

```         
sudo apt-get install libgpiod-dev gpiod
```

### Other libraries:

-   [wiringpi](http://wiringpi.com)

-   [gpio](https://www.raspberrypi.com/documentation/computers/config_txt.html#gpio-control)

-   [libgpiod](https://www.ics.com/blog/gpio-programming-exploring-libgpiod-library)

-   [raspi-gpio](https://github.com/nebrius/raspi-gpio)

## Read the GPIO

![](hello_gpio_bb.png){fig-alt="Schematic showing how to connect a pushbutton to Raspberry pi" width="296"}

## Read the GPIO

``` r
# assign buttons 
TRYME_btn <- 21 # BCM numbering scheme 

while (TRUE) { 
   getGPIOcmd <- paste("gpioget -l gpiochip0", TRYME_btn) 
   if (system(getGPIOcmd, intern = TRUE) == 0) print("Try Me!") 
} # control-Z stops the loop
```

[^1] Available on github as `hello_gpio.r`

[^1]: https://github.com/mnr/R-for-Data-Science-Lunchbreak-Lessons/blob/7b7ce391ac36db029b6820847c9102579fc48682/2023%20cascade%20R%20and%20RPi/hello_gpio.R

## Control the GPIO

![](hello_gpio_control_bb.png){fig-alt="schematic to control light bulb with Raspberry Pi"}

## Control the GPIO

``` r
# assign buttons (use BCM - not board)
getGPIOcmd <- "gpioget gpiochip0 21"

# assign control pin (use BCM)
setGPIOcmd_on <- "gpioset gpiochip0 9=1"
setGPIOcmd_off <- "gpioset gpiochip0 9=0"

while (TRUE) {
  if (system(getGPIOcmd, intern=TRUE) == 1) print ("Try Me!")
  
  system(setGPIOcmd_on)
  Sys.sleep(1)
  system(setGPIOcmd_off)
  Sys.sleep(3)
}
```

[^2] Saved as `hello_gpio_control.R`

[^2]: https://github.com/mnr/R-for-Data-Science-Lunchbreak-Lessons/blob/7b7ce391ac36db029b6820847c9102579fc48682/2023%20cascade%20R%20and%20RPi/hello_gpio_control.R

## Device Drivers

**Problem:** Drivers for circuits are written in other languages.

-   [gpiozero](https://gpiozero.readthedocs.io/en/stable/) is written in python

-   [WiringPi](http://wiringpi.com) is written in C

-   [pigpio](http://abyz.me.uk/rpi/pigpio/index.html) is written in C with python libraries

**Solution**: R works with other languages

-   [rcpp](https://cran.r-project.org/web/packages/Rcpp/index.html) for C

-   [reticulate](https://cran.r-project.org/web/packages/reticulate/index.html) for python
