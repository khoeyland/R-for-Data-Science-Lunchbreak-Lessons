---
title: "Install R on a Raspberry Pi"
author: "Mark Niemann-Ross"
format: revealjs
editor: visual
---

## Install R

``` r
sudo apt-get update
sudo apt-get install r-base r-base-core
```

## Fix the App Menu

R appears in the Graphic Menu. To move it to the programming menu

-   RPi menu -\> Preferences -\> main menu editor

-   programming -\> new item: Name=R, Command=R, Launch in terminal. OK

-   Fix Icon: Rpi menu -\> right click on R.

-   Choose Properties.

-   Click on Icon to bring up chooser.

-   R logo is in system icons

## Which gui

-   Rstudio is not available for Raspberry Pi (available for amd64, but not amdhf)

-   Rgui not available for linux

-   unable to install rcommander or rattle

-   geany works

## Install and Setup geany

https://wiki.geany.org/howtos/using_geany_with_r

https://wiki.geany.org/howtos/configurebuildmenu

This runs the R file in the geany terminal

NOTE: file names cannot have spaces

edit/preferences/terminal...\[\] execute programs in VTE

build -\> set build commands...execute: `Rscript ./%f`

this runs the R file as a batch command, output saved to .Rout in /home/pi or next to input file

build -\> set build commands...`R CMD BATCH: R CMD BATCH ./%f`

## Run R

Geany terminal can be used to run R

enter Geany terminal, then type R to start R

also install packages

``` r
install.packages("cowsay")

library(cowsay)

say("Hello world")

plot(x = 1:10, y = 10:1)
```

## Simple Demo

``` r
myDir <- system("pwd", intern=TRUE) 
print(paste("here i am", myDir))
```

## Read the GPIO

``` r
# assign buttons 
btnAlpha <- 15 # BCM numbering scheme 
btnGamma <- 14

while (TRUE) { 
   getGPIOcmd <- paste("gpioget -l gpiochip0", btnAlpha) 
   if (system(getGPIOcmd, intern = TRUE) == 0) print("Alpha") 
   getGPIOcmd <- paste("gpioget -l gpiochip0", btnGamma)
   if (system(getGPIOcmd, intern = TRUE) == 0) print("Gamma")

} # control-Z stops the loop
```

## Control the GPIO

``` r
# Assign Buttons as a Vector
allBtns <- c(15,14)

while (TRUE) { 
  getGPIOcmd <- paste("gpioget \--active-low gpiochip0", 
                      paste(allBtns, collapse = " ")
                      ) 
  whatIsThis <- system(getGPIOcmd, intern = TRUE) 
  whatIsThis
  
  pinState <- system(getGPIOcmd, intern = TRUE) 
  gpioPins <- as.integer(unlist(strsplit(pinState," "))) 
  if (any(gpioPins)) { 
    print(paste("a=",gpioPins[1]," b=",gpioPins[2])) } 
  if (all(gpioPins)) { 
    print("all buttons are pressed") } 
  if (!any(gpioPins)) { print("no buttons are pressed") }

}
```
