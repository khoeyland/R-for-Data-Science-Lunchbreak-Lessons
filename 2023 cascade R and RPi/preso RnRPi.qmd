---
title: "R on a Raspberry Pi"
author: "Mark Niemann-Ross"
format: revealjs
editor: visual
---

## Install R

``` r
sudo apt-get update
sudo apt-get install r-base r-base-core
```

## Fix the App Menu

![Image showing how to fix the app location in Raspbian](fixtheapp.png)

::: notes
R appears in the Graphic Menu.

To move it to the programming menu

-   RPi menu -\> Preferences -\> main menu editor

-   programming -\> new item: Name=R, Command=R, Launch in terminal. OK
:::

## Fix the Icon

![Image showing how to fix the icon for R](fixtheicon.png)

::: notes
-   Rpi menu -\> right click on R.

-   Choose Properties.

-   Click on Icon to bring up chooser.

-   System Theme::rlogo.icon
:::

## Install a gui

+:-----------------------------------------:+:-----------------------------------------------:+
| ![Rgui](Screenshot_Rgui.png){width="302"} | ![Rstudio](Screenshot_rstudio.png){width="345"} |
+-------------------------------------------+-------------------------------------------------+
| ![Geany](screenshot_geany.png)            |                                                 |
+-------------------------------------------+-------------------------------------------------+

::: notes
-   Rstudio is not available for Raspberry Pi (available for amd64, but not amdhf)

-   Rgui not available for linux

-   unable to install rcommander or rattle

-   **geany works**
:::

## Setup geany

![Configuring geany for R](geany_config.png)

::: notes
+-----------------------------------+---------------------------------------------------------+
| Command                           | What it does                                            |
+===================================+=========================================================+
| edit/preferences/terminal...      | This runs an R file in the geany terminal               |
|                                   |                                                         |
| check - *execute programs in VTE* |                                                         |
+-----------------------------------+---------------------------------------------------------+
| build -\> set build commands...   | this runs the R file as a batch command                 |
|                                   |                                                         |
| execute: `Rscript ./%f`           | output saved to .Rout in /home/pi or next to input file |
+-----------------------------------+---------------------------------------------------------+
| build -\> set build commands...   |                                                         |
|                                   |                                                         |
| `R CMD BATCH: R CMD BATCH ./%f`   |                                                         |
+-----------------------------------+---------------------------------------------------------+

::: notes
<div>

NOTE: file names cannot have spaces

https://wiki.geany.org/howtos/using_geany_with_r

https://wiki.geany.org/howtos/configurebuildmenu

</div>
:::
:::

## Run R

``` r
install.packages("cowsay")

library(cowsay)

say("Hello world")

plot(x = 1:10, y = 10:1)
```

::: notes
Geany terminal can be used to run R

enter Geany terminal, then type R to start R

also install packages
:::

## Install libgpiod

::: notes
Other libraries:

-   [wiringpi](http://wiringpi.com)

-   [gpio](https://www.raspberrypi.com/documentation/computers/config_txt.html#gpio-control)

-   [libgpiod](https://www.ics.com/blog/gpio-programming-exploring-libgpiod-library)

-   [raspi-gpio](https://github.com/nebrius/raspi-gpio)
:::

One of many libraries for GPIO access

```         
sudo apt-get install libgpiod-dev gpiod

or use
raspi-gpio get/set/funcs/raw
```

## Read the GPIO

``` r
# assign buttons 
btnAlpha <- 15 # BCM numbering scheme 
btnGamma <- 14

while (TRUE) { 
   getGPIOcmd <- paste("gpioget -l gpiochip0", btnAlpha) 
   if (system(getGPIOcmd, intern = TRUE) == 0) print("Alpha") 
   getGPIOcmd <- paste("gpioget -l gpiochip0", btnGamma)
   if (system(getGPIOcmd, intern = TRUE) == 0) print("Gamma")

} # control-Z stops the loop
```

## Control the GPIO

``` r
# Assign Buttons as a Vector
allBtns <- c(15,14)

while (TRUE) { 
  getGPIOcmd <- paste("gpioget \--active-low gpiochip0", 
                      paste(allBtns, collapse = " ")
                      ) 
  whatIsThis <- system(getGPIOcmd, intern = TRUE) 
  whatIsThis
  
  pinState <- system(getGPIOcmd, intern = TRUE) 
  gpioPins <- as.integer(unlist(strsplit(pinState," "))) 
  if (any(gpioPins)) { 
    print(paste("a=",gpioPins[1]," b=",gpioPins[2])) } 
  if (all(gpioPins)) { 
    print("all buttons are pressed") } 
  if (!any(gpioPins)) { print("no buttons are pressed") }

}
```
